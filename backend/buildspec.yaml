version: 0.2
phases:
  install:
    commands:
      # Load either production or integration environment variables depending on pipeline
      - echo "Loading environment variables..."
      - export $(cat $PIPELINE_ENVIRONMENT_VARIABLES_FILE | xargs)
      - printenv

      # Install dependencies
      - echo "Install dependencies..."
      # - npm i -g yarn
      - yarn install
  pre_build:
    commands:
      # Build site
      - echo "Building site..."
      - yarn build
  build:
    commands:
      # Use AWS SAM to package the application then deploy using CloudFormation
      - echo "Deploying SAM..."
      - >
        sam package \
          --template-file ./backend/template.yaml \
          --output-template-file ./packaged.yaml \
          --s3-bucket $PACKAGE_BUCKET
      - >
        aws cloudformation deploy \
          --template ./packaged.yaml \
          --stack-name $PIPELINE_STACK_NAME \
          --capabilities CAPABILITY_IAM \
          --no-fail-on-empty-changeset \
          --parameter-overrides Domain=marc-test.com
      # Clear unneeded artifacts when done
      # - aws s3 rm "s3://$PACKAGE_BUCKET" --recursive
      
      # https://docs.aws.amazon.com/cli/latest/reference/cloudformation/deploy/index.html
      #- >
      #  aws cloudformation deploy \
      #    --template ./backend/template.yaml \
      #    --stack-name $PIPELINE_STACK_NAME \
      #    --s3-bucket $PACKAGE_BUCKET
      #    --no-fail-on-empty-changeset

      # Load important outputs from deploy
      - >
        export WEBSITE_BUCKET="$( \
          aws cloudformation describe-stacks \
            --stack-name $PIPELINE_STACK_NAME \
            --query "Stacks[0].Outputs[?OutputKey=='WebsiteBucket'].OutputValue" \
            --output text \
        )"
      - >
        export CLOUDFRONT_DIST_ID="$( \
          aws cloudformation describe-stacks \
            --stack-name $PIPELINE_STACK_NAME \
            --query "Stacks[0].Outputs[?OutputKey=='CloudFrontDistId'].OutputValue" \
            --output text \
        )"
      - echo $WEBSITE_BUCKET
      - echo $CLOUDFRONT_DIST_ID

      # Sync new site build with s3 bucket
      - echo "Syncing Site..."
      - aws s3 cp --recursive ./dist/ "s3://$WEBSITE_BUCKET" 
      # --grants read=uri=http://acs.amazonaws.com/groups/global/AllUsers
      
      # Devalidate outdated resources from Cloudfront
      - echo "Devalidating Cloudfront Cache..."
      - aws cloudfront create-invalidation --distribution-id=$CLOUDFRONT_DIST_ID --paths "/*"
