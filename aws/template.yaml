# AWS Transmutation Pipeline Template
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Parameters:
  Domain:
    Description: >
      Optional domain name with which to host our website. Formatted like: 'example.com'
    Type: String
    Default: ''

Conditions:
  HasDomain:
    !Not [!Equals [!Ref Domain, '']]

Globals:
  # Applies to all serverless functions
  Function:
    Runtime: nodejs12.x
    Timeout: 3
    Handler: index.handler

Resources:
  # Serverless API Functions
  HttpApiFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: functions/funnies/
      Events:
        GetFunny:
          Type: HttpApi # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /get-funny
            Method: get
            ApiId: !Ref HttpApi
  # Define API http endpoint (Need two because FN:If does not work as expected for )
  HttpApi: # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-httpapi.html
    Type: AWS::Serverless::HttpApi
    Conditional: 
    Properties:
      #StageName: prod
      AccessLogSettings:
        DestinationArn: !GetAtt LogGroup.Arn
        Format: $context.requestId
      Domain: # Conditional how?
        DomainName: !Sub api.${Domain}
        CertificateArn: !Ref StaticSiteCert
        EndpointConfiguration: REGIONAL
        Route53:
          HostedZoneId: !Ref HostedZone
          IpV6: true
      CorsConfiguration:
        AllowMethods:
          - GET
          - PUT
          - PATCH
          - DELETE
          - POST
        AllowOrigins:
          - '*'
        AllowHeaders:
          - content-type
        MaxAge: "10"
        AllowCredentials: false
      #Domain: 
      #  CertificateArn: !Ref StaticSiteCert
      #  DomainName: !Sub api.${Domain}
      #!If
      #  - HasDomain
      #  - CertificateArn: !Ref StaticSiteCert
      #    DomainName: !Sub api.${Domain}
      #    EndpointConfiguration: EDGE
      #  - !Ref AWS::NoValue
  LogGroup:
    Type: AWS::Logs::LogGroup
  # Static S3 bucket for hosting our website
  StaticSite:
    Type: AWS::S3::Bucket
    Properties:
      # BucketName: my-website-bucket
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html
  StaticSiteS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref StaticSite
      PolicyDocument:
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: '*'
            Action:
              - s3:GetObject
            Resource: !Sub ${StaticSite.Arn}/*
  # Cloudfront distro allowing for https connection to our static bucket site
  CloudFrontDistribution:
    Condition: HasDomain
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !Sub ${StaticSite}.s3-website-${AWS::Region}.amazonaws.com
            # It isn't necessary to set this value; but we need the same
            # value for DefaultCacheBehavior.TargetOriginId
            Id: !Ref StaticSite
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: http-only
        Enabled: True
        Aliases: 
          - !If
            - HasDomain
            - !Ref Domain
            - !Ref AWS::NoValue
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
          TargetOriginId: !Ref StaticSite
          ForwardedValues:
            QueryString: False
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https
        #ViewerCertificate: 
        #  AcmCertificateArn: !Ref StaticSiteCert
        #  SslSupportMethod: sni-only
        ViewerCertificate: !If
          - HasDomain
          - AcmCertificateArn: !Ref StaticSiteCert
            SslSupportMethod: sni-only
          - !Ref AWS::NoValue
        ## Uncomment the following section in case you want to enable logging for CloudFront requests
        # Logging:
        #  IncludeCookies: 'false'
        #   Bucket: mylogs.s3.amazonaws.com
        #   Prefix: myprefix
    DependsOn:
      - StaticSiteS3BucketPolicy
  # Certification for prod website
  StaticSiteCert:
    Condition: HasDomain
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref Domain
      SubjectAlternativeNames:
        - !Sub api.${Domain}
      DomainValidationOptions:
      - DomainName: !Ref Domain
        ValidationDomain: !Ref Domain
  # Create a hosted zone for our domain
  HostedZone:
    Condition: HasDomain
    Type: AWS::Route53::HostedZone
    Properties:
      Name: !Sub ${Domain}.
  DnsRecords:
    Condition: HasDomain
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: !Ref HostedZone
      RecordSets:
        # Create DNS records to link the cloudfront distro to our domain
        - AliasTarget:
            DNSName: !GetAtt CloudFrontDistribution.DomainName
            HostedZoneId: Z2FDTNDATAQYW2
          Name: !Sub ${Domain}.
          Type: A # ipv 4
        - AliasTarget:
            DNSName: !GetAtt CloudFrontDistribution.DomainName
            HostedZoneId: Z2FDTNDATAQYW2
          Name: !Sub ${Domain}.
          Type: AAAA # ipv 6
        # Create DNS records to link our api to this domain
        #- AliasTarget:
        #    DNSName: !Sub ${HttpApi}.cloudfront.net
        #    HostedZoneId: Z2FDTNDATAQYW2
        #  Name: !Sub api.${Domain}
        #  Type: A # ipv 4
        #- AliasTarget:
        #    DNSName: !Sub ${HttpApi}.cloudfront.net
        #    HostedZoneId: Z2FDTNDATAQYW2
        #  Name: !Sub api.${Domain}
        #  Type: AAAA # ipv 6

Outputs:
  # Our api endpoint is different for dev and prod deployments
  ApiUrl:
    Description: URL of your API endpoint
    Value: !If
      - HasDomain
      - !Sub https://api.${Domain}
      - !Sub https://${HttpApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}
  # Our website homepage is different for dev and prod deployments
  HomepageUrl:
    Description: URL of your Static Website
    Value: !If
      - HasDomain
      - !Sub https://${Domain}
      - !Sub https://${StaticSite}.s3.${AWS::Region}.${AWS::URLSuffix}/index.html
  # The static website buckets we can write website files to
  WebsiteBucket:
    Value: !Ref StaticSite
  # In production build, the cloudfront distribution must be devalidated so users get the new website
  CloudFrontDistId:
    Value: !If
      - HasDomain
      - !Ref CloudFrontDistribution
      - ''